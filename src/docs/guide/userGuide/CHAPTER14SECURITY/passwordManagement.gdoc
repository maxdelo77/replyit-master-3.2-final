A user's password is the most important feature to provide scurity for as you want to prevent unauthorized access to the system. There are several security features built-in *j*billing to help keep passwords secret to their owners.

{note}
Please Note: if your *j*billing setup is such that you do not want external users to access it (including customers), take advantage of a firewall to block connections coming from the Internet.
{note}

h2. Password Requirements

A password needs to comply with a few requirements to be accepted by *j*billing:

* It has to be at least six characters long.
* It needs to contain both numbers and letters.
* It cannot be the same as any previous password for this user for the last two years (applies only when changing the password, not when creating a new user).
* It cannot be the same as any field from the contact information (For example: first name).

h2. Password Encryption

Passwords can be stored encrypted in the database. Since passwords do not need to be shown at any time, the encryption method is a 'one-way' encryption: once a password is encrypted, it cannot be decrypted. This works because when a user tries to login, the entered password is encrypted and in this form compared with the one in the database (which is also encrypted). If they are the same, the authentication is successful.

{note}
Please Note: these requirements are implemented in *j*Billing by using 'validator'. You could change which validators are applied to a new password by changing the file 'validation.xml' in the source distribution of *j*Billing. 
{note}

In *j*billing, the password of roles above customer are always encrypted, you do not need to do anything for this to happen.

Customer's passwords are optionally encrypted. You can enable it by using the property: password_encrypt_all in jbilling.properties. If 'true' all the passwords will be encrypted. Otherwise, only those of users with roles *above* customer (clerks, administrators, etc) will be encrypted.

!jbilling.properties.png!

!passwordencrypt.png!

Why would you want the customer's password to be stored in plain-text? Having encrypted information in the database has its drawbacks. 

For example: you won't be able to tell a customer what their password is (although you can change it yourself and tell them their new password). The feature to retrieve passwords does not work if the password are stored encrypted. The customer would simply receive the password encrypted in an email. This would not be helpful to the customer.

h2. Limiting Retries

How many times do you allow a user to enter the wrong password in a row? A typical way to figure out someone's password is to simply try. If done in an automated way, this has a chance to be successful, compromising the user's account.

To prevent this, you can configure *j*billing to lock a user out if they try too many times to login. You can do this by using *j*billing preference: 39. If it is 0, then the feature is disabled an a user has unlimited attempts to login. If the value is set to a number greater than 0, then that number is how many times a users can attempt to login. In the example below, the value has been set to 3. This means that the user has 3 tries to get their password right before the system locks them out. To learn how to change the value of a *j*billing preference, please refer to Appendix A: Preferences.

!lockoutpassword.png!

!passwordlockoutvalue.png!

If the limit of retires is reached, the account is locked-out by changing its password to the value in the property 'lockout_password' in jbilling.properties. Make sure to change this property from its default and set it as a long, random string of up to 20 characters.

!lockoutpasswordproperty.png!

h2. Password Expiration

A good way to enhance the security of password is by making them expire. When the password expires, the user is forced to change it. This enforces the good practice of periodically changing a password, but it comes at a price. People usually remember a few set of passwords, and by forcing users to change them often leads to more occurrences of forgotten passwords.

Thus, password expiration is optional in *j*billing, and can be activated or deactivated at any time. You will be using preference: 40 for this. Set the value to 0 if you do not want your passwords to expire. This is also the default value. 

!expirepassword.png!

If you want to enable password expiration, set the value of the preference to a number higher than 0. The value will be the number of days the password is valid for. Past that date, the password is expired and needs to be changed.

!expirepasswordvalue.png!

In this example, the password will expire after 60 days. 

To learn how to setup preferences in *j*billing, refer to Appendix A: Preferences.